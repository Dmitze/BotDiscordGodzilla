const { Client, GatewayIntentBits, Routes } = require('discord.js');
const fetch = (...args) => import('node-fetch').then(({ default: f }) => f(...args));
const XLSX = require('xlsx');
const {
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle
} = require('@discordjs/builders');
require('dotenv').config();

// ‚ùó –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ENV-–∑–º—ñ–Ω–Ω–∏—Ö
if (!process.env.SHEET_ID || !process.env.GOOGLE_API_KEY || !process.env.APP_SCRIPT_URL || !process.env.BOT_TOKEN) {
  console.error("‚ùó –û–¥–Ω–∞ –∑ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö ENV-–∑–º—ñ–Ω–Ω–∏—Ö –≤—ñ–¥—Å—É—Ç–Ω—è");
  process.exit(1);
}

const SHEET_ID = process.env.SHEET_ID;
const SHEET_NAME = '–ê—Ä–∫—É—à1';
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
const APP_SCRIPT_URL = process.env.APP_SCRIPT_URL;

const API_URL = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${SHEET_NAME}?key=${GOOGLE_API_KEY}`;
const CELLS_URL = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/C964:E964?key=${GOOGLE_API_KEY}`;

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions
  ]
});

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥
const { REST } = require('@discordjs/rest');
const { version } = require('discord.js').Constants;

const commands = [
  {
    name: '–∑–∞–ª–∏—à–∫–∏',
    description: '–ü–æ–∫–∞–∑—É—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤'
  },
  {
    name: '–æ–Ω–æ–≤–∏—Ç–∏',
    description: '–ü—Ä–∏–Ω—É–¥–æ–≤–æ –æ–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ'
  },
  {
    name: '–ø–æ—Ä–æ–∂–Ω—ñ',
    description: '–ü–æ–∫–∞–∑—É—î —Ç–æ–≤–∞—Ä–∏ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é'
  },
  {
    name: '–ø–æ—à—É–∫',
    description: '–ü–æ—à—É–∫ –∑–∞ –ø–æ–ª—è–º–∏ —Ç–∞–±–ª–∏—Ü—ñ',
    options: [
      {
        name: '–ø–æ–ª–µ',
        description: '–ó–∞ —è–∫–∏–º –ø–æ–ª–µ–º —à—É–∫–∞—Ç–∏',
        type: 3,
        required: true,
        choices: [
          { name: '–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è', value: '–Ω–∞–∑–≤–∞' },
          { name: '–°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä', value: '—Å–µ—Ä—ñ—è' },
          { name: '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', value: '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç' },
          { name: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', value: '–∫—ñ–ª—å–∫—ñ—Å—Ç—å' },
          { name: '–¶—ñ–Ω–∞', value: '—Ü—ñ–Ω–∞' }
        ]
      },
      {
        name: '–∑–∞–ø–∏—Ç',
        description: '–©–æ —à—É–∫–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "—Å—Ç–æ–ª", "5")',
        type: 3,
        required: true
      }
    ]
  },
  {
    name: '—Ä–æ–∑—É–º–Ω–∏–π-–ø–æ—à—É–∫',
    description: '–ü–æ—à—É–∫ –∑–∞ –∫—ñ–ª—å–∫–æ–º–∞ –ø–æ–ª—è–º–∏',
    options: [
      { name: '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', type: 3, description: '–®—É–∫–∞—Ç–∏ –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–æ–≤–∞—Ä—É' },
      { name: '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', type: 3, description: '–®—É–∫–∞—Ç–∏ –∑–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º' },
      { name: '—Å–µ—Ä—ñ—è', type: 3, description: '–®—É–∫–∞—Ç–∏ –∑–∞ —Å–µ—Ä—ñ–π–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º' },
      { name: '—Ü—ñ–Ω–∞_–≤–∏—â–µ', type: 10, description: '–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –¥–æ—Ä–æ–∂—á–µ —Ü—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è' },
      { name: '–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–≤–∏—â–µ', type: 10, description: '–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –±—ñ–ª—å—à–µ' }
    ]
  },
  {
    name: '–ø–æ—à—É–∫-–µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ',
    description: '–ï–∫—Å–ø–æ—Ä—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –≤ Excel (.xlsx)',
    options: [
      {
        name: '–ø–æ–ª–µ',
        description: '–ó–∞ —è–∫–∏–º –ø–æ–ª–µ–º —à—É–∫–∞—Ç–∏',
        type: 3,
        required: true,
        choices: [
          { name: '–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è', value: '–Ω–∞–∑–≤–∞' },
          { name: '–°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä', value: '—Å–µ—Ä—ñ—è' },
          { name: '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', value: '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç' },
          { name: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', value: '–∫—ñ–ª—å–∫—ñ—Å—Ç—å' },
          { name: '–¶—ñ–Ω–∞', value: '—Ü—ñ–Ω–∞' }
        ]
      },
      {
        name: '–∑–∞–ø–∏—Ç',
        description: '–©–æ —à—É–∫–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "—Å—Ç–æ–ª", "5")',
        type: 3,
        required: true
      }
    ]
  },
  {
    name: '–µ–∫—Å–ø–æ—Ä—Ç',
    description: '–ï–∫—Å–ø–æ—Ä—Ç—É—î –≤—Å—é —Ç–∞–±–ª–∏—Ü—é –≤ Excel (.xlsx)'
  },
  {
    name: 'help',
    description: '–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥'
  }
];

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üìÅ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ Google Sheets
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async function getSheetData(range = SHEET_NAME) {
  const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${range}?key=${GOOGLE_API_KEY}`;
  console.log(`üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞–Ω—ñ –∑ ${url}`);

  try {
    const res = await fetch(url);
    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
    
    const data = await res.json();
    return data.values || [];
  } catch (err) {
    console.error('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ:', err.message);
    return [];
  }
}

const rest = new REST({ version: '10' }).setToken(process.env.BOT_TOKEN);

let previousData = null;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Google Sheets
async function loadSheetData() {
  const res = await fetch(API_URL);
  if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
  return await res.json();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É –∫–æ–ª–æ–Ω–∫–∏ –∑–∞ —ó—ó –Ω–∞–∑–≤–æ—é
function getColumnIndex(headers, field) {
  const headerMap = {
    –Ω–∞–∑–≤–∞: ['–Ω–∞–∑–≤–∞', '–Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è'],
    —Å–µ—Ä—ñ—è: ['—Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä', '—Å–µ—Ä—ñ—è'],
    –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: ['–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', '–ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫'],
    –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ['–∫—ñ–ª—å–∫—ñ—Å—Ç—å', '–∑–∞–ª–∏—à–æ–∫'],
    —Ü—ñ–Ω–∞: ['—Ü—ñ–Ω–∞', '–≤–∞—Ä—Ç—ñ—Å—Ç—å']
  };

  for (let i = 0; i < headers.length; i++) {
    const headerName = headers[i]?.toLowerCase().trim();
    if (headerMap[field].includes(headerName)) {
      return i;
    }
  }

  return -1;
}

// –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω —É —Ç–∞–±–ª–∏—Ü—ñ
async function checkForChanges(botClient) {
  try {
    const data = await loadSheetData();
    const currentRows = data.values;

    if (!previousData) {
      previousData = currentRows;
      return;
    }

    const changedCells = [];
    for (let i = 0; i < Math.min(currentRows.length, previousData.length); i++) {
      const oldRow = previousData[i];
      const newRow = currentRows[i];
      if (!oldRow || !newRow) continue;

      for (let j = 0; j < Math.min(oldRow.length, newRow.length); j++) {
        if (oldRow[j] !== newRow[j]) {
          changedCells.push({
            row: i + 1,
            column: j + 1,
            from: oldRow[j],
            to: newRow[j]
          });
        }
      }
    }

    if (changedCells.length > 0) {
      const channel = botClient.channels.cache.find(ch => ch.name === '—Å–∫–ª–∞–¥' && ch.type === 0);
      if (!channel) return;

      let message = 'üîî –í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ:\n';
      changedCells.forEach(change => {
        const colLetter = String.fromCharCode(64 + change.column);
        message += `\n–ö–ª—ñ—Ç–∏–Ω–∫–∞ ${colLetter}${change.row}:\n–ë—É–ª–æ: \`${change.from}\`, —Å—Ç–∞–ª–æ: \`${change.to}\``;
      });

      const embed = new EmbedBuilder()
        .setTitle('üîî –í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–∏')
        .setDescription(message)
        .setColor(3447003)
        .setTimestamp();

      await channel.send({ embeds: [embed] });
    }

    previousData = currentRows;
  } catch (err) {
    console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–º—ñ–Ω–∏:', err.message);
  }
}

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üìä –û–±—Ä–æ–±–∫–∞ —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
client.on('interactionCreate', async interaction => {
  if (!interaction.isChatInputCommand()) return;
  try {
    switch (interaction.commandName) {
      case '–∑–∞–ª–∏—à–∫–∏':
        const cellRes = await fetch(CELLS_URL);
        if (!cellRes.ok) throw new Error(`HTTP error! status: ${cellRes.status}`);
        const cellData = await cellRes.json();
        const cellValues = cellData.values?.flat() || [];
        const totalValue = Number(cellValues[0]) || 0;
        const totalQuantity = Number(cellValues[1]) || 0;
        const avgPrice = Number(cellValues[2]) || 0;
        const embed = new EmbedBuilder()
          .setTitle('üìä –ó–∞–≥–∞–ª—å–Ω—ñ –∑–∞–ª–∏—à–∫–∏')
          .addFields([
            { name: '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞', value: `${totalValue.toFixed(2)} –≥—Ä–Ω`, inline: true },
            { name: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', value: `${totalQuantity} —à—Ç.`, inline: true },
            { name: '–°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞', value: `${avgPrice.toFixed(2)} –≥—Ä–Ω`, inline: true }
          ])
          .setColor(5763719)
          .setFooter({ text: '–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —Å–ª—É–∂–±–∞' })
          .setTimestamp();
        await interaction.reply({ embeds: [embed], ephemeral: false });
        break;
      case '–æ–Ω–æ–≤–∏—Ç–∏':
        const sheetData = await getSheetData();
        const rows = sheetData.slice(1);
        const headers = sheetData[0];
        let output = '| –ù–∞–∑–≤–∞       | –ö—ñ–ª—å–∫—ñ—Å—Ç—å | –¶—ñ–Ω–∞ |\n';
        output += '|--------------|------------|--------|\n';
        for (let i = Math.max(0, rows.length - 10); i < rows.length; i++) {
          const row = rows[i];
          const name = row[getColumnIndex(headers, '–Ω–∞–∑–≤–∞')] || '‚Äî';
          const quantity = row[getColumnIndex(headers, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å')] || '‚Äî';
          const price = row[getColumnIndex(headers, '—Ü—ñ–Ω–∞')] || '‚Äî';
          output += `| ${name.padEnd(13).slice(0, 13)} | ${quantity} | ${price} |\n`;
        }
        const embedUpdate = new EmbedBuilder()
          .setTitle('üîÑ –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏')
          .setDescription(`\`\`\`md\n${output}\`\`\``)
          .setColor(3066993);
        await interaction.reply({ embeds: [embedUpdate], ephemeral: false });
        break;
      case '–ø–æ—Ä–æ–∂–Ω—ñ':
        const lowStockData = await getSheetData();
        const lowStockRows = lowStockData.slice(1);
        const lowStockHeaders = lowStockData[0];
        const lowStock = lowStockRows.filter(row => Number(row[getColumnIndex(lowStockHeaders, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å')] || 0) <= 5);
        if (lowStock.length === 0) {
          await interaction.reply({ content: 'üü¢ –£—Å—ñ —Ç–æ–≤–∞—Ä–∏ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.', ephemeral: false });
          return;
        }
        let outputLowStock = '';
        for (let i = 0; i < Math.min(10, lowStock.length); i++) {
          const row = lowStock[i];
          const name = row[getColumnIndex(lowStockHeaders, '–Ω–∞–∑–≤–∞')] || '‚Äî';
          const quantity = row[getColumnIndex(lowStockHeaders, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å')] || '‚Äî';
          outputLowStock += `
‚Ä¢ ${name} | –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${quantity}`;
        }
        const embedLowStock = new EmbedBuilder()
          .setTitle(`‚ö†Ô∏è –ú–∞–ª–æ —Ç–æ–≤–∞—Ä—É (${lowStock.length})`)
          .setDescription(outputLowStock)
          .setColor(15158332);
        const rowButtons = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId('download_excel_low_stock')
              .setLabel('–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel')
              .setStyle(ButtonStyle.Success)
          );
        await interaction.reply({ embeds: [embedLowStock], components: [rowButtons], ephemeral: false });
        break;

        case '–ø–æ—à—É–∫':
          const field = interaction.options.getString('–ø–æ–ª–µ');
          const query = interaction.options.getString('–∑–∞–ø–∏—Ç').toLowerCase();
        
          const sheetData = await getSheetData();
          const headers = sheetData[0];
          const rows = sheetData.slice(1);
        
          let colIndex = getColumnIndex(headers, field);
          if (colIndex === -1) {
            await interaction.reply({ content: '‚ùå –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–ª–µ –¥–ª—è –ø–æ—à—É–∫—É.', ephemeral: false });
            return;
          }
        
          const isNumericField = ['–∫—ñ–ª—å–∫—ñ—Å—Ç—å', '—Ü—ñ–Ω–∞'].includes(field);
          const results = rows.filter(row => {
            const value = row[colIndex]?.toString().toLowerCase() || '';
            return isNumericField ? Number(value) >= Number(query) : value.includes(query);
          });
        
          if (results.length === 0) {
            return interaction.reply({ content: 'üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', ephemeral: false });
          }
          
          cacheSearchResults(interaction.user.id, results);
          
          let currentPage = 0;
          const itemsPerPage = 10;
          
          function generatePageEmbed(results, page) {
            const totalPages = Math.ceil(results.length / itemsPerPage);
            const paginatedResults = results.slice(page * itemsPerPage, (page + 1) * itemsPerPage);
            let output = '| –ù–∞–∑–≤–∞       | –ö—ñ–ª—å–∫—ñ—Å—Ç—å | –¶—ñ–Ω–∞ |\n|--------------|------------|--------|\n';
          
            for (let i = 0; i < paginatedResults.length && i < itemsPerPage; i++) {
              const row = paginatedResults[i];
              const name = row[6] || '‚Äî';
              const quantity = row[3] || '‚Äî';
              const price = row[4] || '‚Äî';
              output += `| ${name.padEnd(13).slice(0, 13)} | ${quantity} | ${price} |\n`;
            }
          
            return new EmbedBuilder()
              .setTitle(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É (${results.length})`)
              .setDescription(`\`\`\`md\n${output}\`\`\``)
              .setFooter({ text: `–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${page + 1}/${totalPages}` })
              .setColor(3066993);
          }
          
          const  = new ActionRowBuilder()
            .addComponents(
              new ButtonBuilder()
                .setCustomId('prev_page')
                .setLabel('‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è')
                .setStyle(ButtonStyle.Secondary),
              new ButtonBuilder()
                .setCustomId('next_page')
                .setLabel('‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞')
                .setStyle(ButtonStyle.Secondary),
              new ButtonBuilder()
                .setCustomId('download_excel_search')
                .setLabel('üìä –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏')
                .setStyle(ButtonStyle.Success)
            );
          
          await interaction.reply({
            embeds: [generatePageEmbed(results, currentPage)],
            components: [rowButtons],
            ephemeral: false
          });

      case '–ø–æ—à—É–∫-–µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ': {
        const field = interaction.options.getString('–ø–æ–ª–µ');
        const query = interaction.options.getString('–∑–∞–ø–∏—Ç').toLowerCase();
      
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        const sheetData = await getSheetData();
        const rows = sheetData.slice(1);
        const headers = sheetData[0];
      
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –ø–æ—à—É–∫—É
        let colIndex = getColumnIndex(headers, field);
        if (colIndex === -1) {
          return interaction.reply({ content: '‚ùå –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–ª–µ –¥–ª—è –ø–æ—à—É–∫—É.', ephemeral: false });
        }
      
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        const isNumericField = ['–∫—ñ–ª—å–∫—ñ—Å—Ç—å', '—Ü—ñ–Ω–∞'].includes(field);
        const results = rows.filter(row => {
          const value = row[colIndex]?.toString().toLowerCase() || '';
          return isNumericField ? Number(value) >= Number(query) : value.includes(query);
        });
      
        if (results.length === 0) {
          return interaction.reply({ content: 'üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', ephemeral: false });
        }
      
        // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        let outputSearch = '| –ù–∞–∑–≤–∞       | –ö—ñ–ª—å–∫—ñ—Å—Ç—å | –¶—ñ–Ω–∞ |\n';
        outputSearch += '|--------------|------------|--------|\n';
      
        for (let i = 0; i < Math.min(10, results.length); i++) {
          const row = results[i];
          const name = row[getColumnIndex(headers, '–Ω–∞–∑–≤–∞')] || '‚Äî';
          const quantity = row[getColumnIndex(headers, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å')] || '‚Äî';
          const price = row[getColumnIndex(headers, '—Ü—ñ–Ω–∞')] || '‚Äî';
          outputSearch += `| ${name.padEnd(13).slice(0, 13)} | ${quantity} | ${price} |\n`;
        }
      
        // –°—Ç–≤–æ—Ä—é—î–º–æ Embed
        const embedSearch = new EmbedBuilder()
          .setTitle(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É (${results.length})`)
          .setDescription(`\`\`\`md\n${outputSearch}\`\`\``)
          .setColor(3066993);
      
        // –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ '/–ø–æ—à—É–∫' ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel"
        if (interaction.commandName === '–ø–æ—à—É–∫') {
          const rowButtons = new ActionRowBuilder()
            .addComponents(
              new ButtonBuilder()
                .setCustomId('download_excel_search')
                .setLabel('–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel')
                .setStyle(ButtonStyle.Primary)
            );
          await interaction.reply({ embeds: [embedSearch], components: [rowButtons], ephemeral: false });
        } 
        // –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ '/–ø–æ—à—É–∫-–µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ' ‚Äî –µ–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        else if (interaction.commandName === '–ø–æ—à—É–∫-–µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ') {
          const exportData = [headers, ...results]; // –∑–∞–≥–æ–ª–æ–≤–∫–∏ + —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
          const worksheet = XLSX.utils.aoa_to_sheet(exportData);
          const workbook = XLSX.utils.book_new();
          XLSX.utils.book_append_sheet(workbook, worksheet, '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É');
          const filePath = './search_results.xlsx';
          XLSX.writeFile(workbook, filePath);
      
          await interaction.reply({
            content: 'üìä –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:',
            files: [filePath],
            ephemeral: false
          });
        }
        break;
      }

      case '—Ä–æ–∑—É–º–Ω–∏–π-–ø–æ—à—É–∫': {
        const sheetData = await getSheetData();
        const rows = sheetData.slice(1);
        const headers = sheetData[0];
        const filters = {
          name: interaction.options.getString('–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'),
          client: interaction.options.getString('–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'),
          series: interaction.options.getString('—Å–µ—Ä—ñ—è'),
          priceMin: interaction.options.getNumber('—Ü—ñ–Ω–∞_–≤–∏—â–µ'),
          quantityMin: interaction.options.getNumber('–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–≤–∏—â–µ')
        };
      
        const smartResults = rows.filter(row => {
          const nameMatch = !filters.name || row[getColumnIndex(headers, '–Ω–∞–∑–≤–∞')]?.toLowerCase().includes(filters.name.toLowerCase());
          const clientMatch = !filters.client || row[getColumnIndex(headers, '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç')]?.toLowerCase().includes(filters.client.toLowerCase());
          const seriesMatch = !filters.series || row[getColumnIndex(headers, '—Å–µ—Ä—ñ—è')]?.toLowerCase().includes(filters.series.toLowerCase());
          const priceMatch = !filters.priceMin || Number(row[getColumnIndex(headers, '—Ü—ñ–Ω–∞')] || 0) >= filters.priceMin;
          const quantityMatch = !filters.quantityMin || Number(row[getColumnIndex(headers, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å')] || 0) >= filters.quantityMin;
      
          return nameMatch && clientMatch && seriesMatch && priceMatch && quantityMatch;
        });
      
        if (smartResults.length === 0) {
          return interaction.reply({ content: 'üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', ephemeral: false });
        }
      
        let outputSmartSearch = '| –ù–∞–∑–≤–∞       | –ö—ñ–ª—å–∫—ñ—Å—Ç—å | –¶—ñ–Ω–∞ |\n';
        outputSmartSearch += '|--------------|------------|--------|\n';
      
        for (let i = 0; i < Math.min(10, smartResults.length); i++) {
          const row = smartResults[i];
          const name = row[getColumnIndex(headers, '–Ω–∞–∑–≤–∞')] || '‚Äî';
          const quantity = row[getColumnIndex(headers, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å')] || '‚Äî';
          const price = row[getColumnIndex(headers, '—Ü—ñ–Ω–∞')] || '‚Äî';
          outputSmartSearch += `| ${name.padEnd(13).slice(0, 13)} | ${quantity} | ${price} |\n`;
        }
      
        const embedSmartSearch = new EmbedBuilder()
          .setTitle(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—É–º–Ω–æ–≥–æ –ø–æ—à—É–∫—É (${smartResults.length})`)
          .setDescription(`\`\`\`md\n${outputSmartSearch}\`\`\``)
          .setColor(3066993);
      
        const rowSmartExport = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId('download_excel_smart')
              .setLabel('–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel')
              .setStyle(ButtonStyle.Success)
          );
      
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ –∫–µ—à—ñ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
        searchCache[interaction.user.id] = { results: smartResults, headers };
      
        await interaction.reply({ 
          embeds: [embedSmartSearch], 
          components: [rowSmartExport], 
          ephemeral: false 
        });
        break;
      }

      case '–µ–∫—Å–ø–æ—Ä—Ç': {
        const sheetData = await getSheetData();
        const exportRows = sheetData || [];
        const worksheet = XLSX.utils.aoa_to_sheet(exportRows);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, '–î–∞–Ω—ñ');
        const filePath = './table.xlsx';
        XLSX.writeFile(workbook, filePath);
        await interaction.reply({
          content: 'üìé –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—é —Ç–∞–±–ª–∏—Ü—é...',
          files: [filePath],
          ephemeral: false
        });
        break;
      }
      case 'help': {
        const helpEmbed = new EmbedBuilder()
          .setTitle('üìö –î–æ–ø–æ–º–æ–≥–∞')
          .setDescription('–û—Å—å —É—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:')
          .addFields([
            { name: '/–∑–∞–ª–∏—à–∫–∏', value: '–ü–æ–∫–∞–∑—É—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ —Å—É–º—É —Ç–æ–≤–∞—Ä—ñ–≤', inline: false },
            { name: '/–æ–Ω–æ–≤–∏—Ç–∏', value: '–ü–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤', inline: false },
            { name: '/–ø–æ—Ä–æ–∂–Ω—ñ', value: '–ü–æ–∫–∞–∑—É—î —Ç–æ–≤–∞—Ä–∏, –¥–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å ‚â§ 5', inline: false },
            { name: '/–ø–æ—à—É–∫ [–ø–æ–ª–µ] [–∑–∞–ø–∏—Ç]', value: '–ü–æ—à—É–∫ –∑–∞ –ø–æ–ª—è–º–∏: –Ω–∞–∑–≤–∞, —Å–µ—Ä—ñ—è, –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', inline: false },
            { name: '/—Ä–æ–∑—É–º–Ω–∏–π-–ø–æ—à—É–∫', value: '–ü–æ—à—É–∫ –∑–∞ –∫—ñ–ª—å–∫–æ–º–∞ –ø–æ–ª—è–º–∏', inline: false },
            { name: '/–ø–æ—à—É–∫-–µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ [–ø–æ–ª–µ] [–∑–∞–ø–∏—Ç]', value: '–ï–∫—Å–ø–æ—Ä—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –≤ Excel', inline: false },
            { name: '!–¥–æ–¥–∞—Ç–∏ [–Ω–∞–∑–≤–∞] [–∫—ñ–ª—å–∫—ñ—Å—Ç—å]', value: '–î–æ–¥–∞—î –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å —á–µ—Ä–µ–∑ Google Apps Script', inline: false },
            { name: '!–µ–∫—Å–ø–æ—Ä—Ç', value: '–ï–∫—Å–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –≤—Å—è —Ç–∞–±–ª–∏—Ü—è', inline: false }
          ])
          .setColor(5763719)
          .setTimestamp();

        const rowHelp = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setLabel('–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è')
              .setURL('https://your-docs-link-here')
              .setStyle(ButtonStyle.Link)
          );

        await interaction.reply({ embeds: [helpEmbed], components: [rowHelp], ephemeral: false });
        break;
      }

      default:
        await interaction.reply({ content: '‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞!', ephemeral: true });
    }
  } catch (err) {
    console.error(err);
    await interaction.reply({ content: '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.', ephemeral: true });
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
client.on('interactionCreate', async interaction => {
  if (!interaction.isButton()) return;

  const userId = interaction.user.id;
  const cachedResults = getCachedResults(userId, 'smart');
  if (!cachedResults && interaction.customId.startsWith('download_excel_smart')) {
    return interaction.reply({ content: '‚ùå –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.', ephemeral: true });
  }

  if (interaction.customId === 'download_excel_smart') {
    try {
      const sheetData = await loadSheetData();
      const headers = sheetData.values[0];
      const exportData = [headers, ...cachedResults];

      const worksheet = XLSX.utils.aoa_to_sheet(exportData);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É');

      const filePath = './tmp/smart_search_results.xlsx';
      XLSX.writeFile(workbook, filePath);

      await interaction.update({ content: 'üìé –§–æ—Ä–º—É—î–º–æ Excel...', components: [] });
      await interaction.followUp({
        content: 'üìä –û—Å—å –≤–∞—à–∞ —Ç–∞–±–ª–∏—Ü—è:',
        files: [filePath],
        ephemeral: false
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        require('fs').unlink(filePath, () => {});
      }, 10000);

    } catch (err) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ:', err);
      await interaction.reply({ content: '‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ñ–∞–π–ª.', ephemeral: true });
    }
    return;
  }

  // –û–±—Ä–æ–±–∫–∞ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ (–ø–æ–ø–µ—Ä–µ–¥–Ω—è/–Ω–∞—Å—Ç—É–ø–Ω–∞)
  if (['prev_page_smart', 'next_page_smart'].includes(interaction.customId)) {
    let currentPage = parseInt(interaction.message.embeds[0].footer.text.match(/(\d+)\/(\d+)/)?.[1] || 1);
    if (interaction.customId === 'prev_page_smart' && currentPage > 1) currentPage--;
    if (interaction.customId === 'next_page_smart' && currentPage * itemsPerPage < cachedResults.length) currentPage++;

    const newEmbed = generatePageEmbed(cachedResults, currentPage, 'smart');
    
    const canPrev = currentPage > 1;
    const canNext = currentPage * itemsPerPage < cachedResults.length;

    const rowButtons = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('prev_page_smart')
          .setLabel('‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è')
          .setStyle(ButtonStyle.Secondary)
          .setDisabled(!canPrev),
        new ButtonBuilder()
          .setCustomId('next_page_smart')
          .setLabel('‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞')
          .setStyle(ButtonStyle.Secondary)
          .setDisabled(!canNext),
        new ButtonBuilder()
          .setCustomId('download_excel_smart')
          .setLabel('üìä –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏')
          .setStyle(ButtonStyle.Success)
      );

    await interaction.update({ embeds: [newEmbed], components: [rowButtons] });
  }
});

setInterval(clearOldFiles, 300000); // –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω

// –¢–µ–∫—Å—Ç–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
client.on('messageCreate', async msg => {
  if (msg.author.bot) return;

  const args = msg.content.split(' ');

  if (args[0] === '!–¥–æ–¥–∞—Ç–∏') {
    if (args.length < 3) {
      return msg.reply('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `!–¥–æ–¥–∞—Ç–∏ [–Ω–∞–∑–≤–∞] [–∫—ñ–ª—å–∫—ñ—Å—Ç—å]`');
    }

    const name = args.slice(1, -1).join(' ');
    const quantity = parseInt(args[args.length - 1]);

    if (!name || isNaN(quantity)) {
      return msg.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: `!–¥–æ–¥–∞—Ç–∏ –Ω–æ—É—Ç–±—É–∫ 5`');
    }

    try {
      const response = await fetch(APP_SCRIPT_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, quantity })
      });

      const text = await response.text();
      if (text.trim() === 'OK') {
        msg.reply(`‚úÖ –î–æ–¥–∞–Ω–æ: "${name}" √ó ${quantity}`);
      } else {
        msg.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å.');
      }
    } catch (err) {
      console.error(err);
      msg.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ Google Apps Script.');
    }
  }

  if (msg.content === '!–µ–∫—Å–ø–æ—Ä—Ç') {
    try {
      const sheetData = await loadSheetData();
      const worksheet = XLSX.utils.aoa_to_sheet(sheetData.values);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, '–î–∞–Ω—ñ');

      const filePath = './table.xlsx';
      XLSX.writeFile(workbook, filePath);

      await msg.reply({
        content: 'üìä –î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ:',
        files: [filePath]
      });
    } catch (err) {
      console.error(err);
      msg.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ñ–∞–π–ª.');
    }
  }
});

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// üß† –ö–µ—à –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const searchCache = {};
const CACHE_TTL = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω

function cacheSearchResults(userId, results) {
  searchCache[userId] = {
    results,
    timestamp: Date.now()
  };
}

function getCachedResults(userId) {
  const cached = searchCache[userId];
  if (!cached || Date.now() - cached.timestamp > CACHE_TTL) return null;
  return cached.results;
}

function clearOldFiles() {
  const fs = require('fs');
  const path = require('path');
  const tmpDir = './tmp';
  if (!fs.existsSync(tmpDir)) return;

  fs.readdir(tmpDir, (err, files) => {
    if (err) return console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ø–∞–ø–∫—É:', err);
    files.forEach(file => {
      const filePath = path.join(tmpDir, file);
      fs.stat(filePath, (err, stats) => {
        if (err) return console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª—É:', err);
        if (Date.now() - stats.mtimeMs > CACHE_TTL) {
          fs.unlink(filePath, err => {
            if (err) console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª:', err);
            else console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª: ${file}`);
          });
        }
      });
    });
  });
}

// –õ–æ–≥—ñ–Ω –±–æ—Ç–∞
client.once('ready', async () => {
  console.log(`–ë–æ—Ç ${client.user.tag} –æ–Ω–ª–∞–π–Ω!`);
  try {
    await rest.put(Routes.applicationCommands(client.user.id), { body: commands });
    console.log('Slash-–∫–æ–º–∞–Ω–¥–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!');
  } catch (error) {
    console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏:', error);
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
  setInterval(() => checkForChanges(client), 300000);
});

client.login(process.env.BOT_TOKEN).catch(console.error);