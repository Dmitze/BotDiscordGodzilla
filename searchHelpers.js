const { EmbedBuilder } = require('discord.js');

// === –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü—ã ===
function getColumnIndex(headers, field) {
  const headerMap = {
    –Ω–∞–∑–≤–∞: [
      '–Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏',
      '–Ω–∞–∑–≤–∞',
      '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã',
      '–Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è'
    ],
    —Å–µ—Ä—ñ—è: [
      '—Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä',
      '—Å–µ—Ä–π—ñ–Ω–∏–π –Ω–æ–º–µ—Ä',
      '—Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä',
      '—Å–µ—Ä—ñ—è'
    ],
    –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: [
      '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç',
      '–ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫',
      '–ø–æ—Å—Ç–∞–≤—â–∏–∫'
    ],
    –∫—ñ–ª—å–∫—ñ—Å—Ç—å: [
      '–∫—ñ–ª—å–∫—ñ—Å—Ç—å',
      '–∑–∞–ª–∏—à–æ–∫',
      '–æ—Å—Ç–∞—Ç–æ–∫',
      '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
    ],
    —Ü—ñ–Ω–∞: [
      '—Ü—ñ–Ω–∞',
      '—Ü–µ–Ω–∞',
      '–≤–∞—Ä—Ç—ñ—Å—Ç—å',
      '—Å—Ç–æ–∏–º–æ—Å—Ç—å'
    ],
    –≤–∞—Ä—Ç—ñ—Å—Ç—å: [
      '–≤–∞—Ä—Ç—ñ—Å—Ç—å',
      '—Å—Ç–æ–∏–º–æ—Å—Ç—å'
    ]
  };
  for (let i = 0; i < headers.length; i++) {
    const headerName = (headers[i] || '').toLowerCase().replace(/\s+/g, ' ').trim();
    if (headerMap[field]?.some(h => h.toLowerCase() === headerName)) {
      return i;
    }
  }
  return -1;
}

async function getSheetData(range = process.env.SHEET_NAME || '–ê—Ä–∫—É—à1') {
  const SHEET_ID = process.env.SHEET_ID;
  const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
  const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${encodeURIComponent(range)}?key=${GOOGLE_API_KEY}`;
  try {
    const res = await fetch(url);
    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
    const data = await res.json();
    return data.values || [];
  } catch (err) {
    console.error('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ:', err.message);
    return [];
  }
}

// --- –ö–≠–® –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---
const searchCache = {};
const CACHE_TTL = 5 * 60 * 1000;
const itemsPerPage = 10;

function cacheSearchResults(userId, results, headers) {
  searchCache[userId] = {
    results,
    headers,
    timestamp: Date.now()
  };
}
function getCachedResults(userId) {
  const cached = searchCache[userId];
  if (!cached || Date.now() - cached.timestamp > CACHE_TTL) {
    return null;
  }
  return cached;
}
function generatePageEmbed(results, page, headers) {
  const totalPages = Math.max(1, Math.ceil(results.length / itemsPerPage));
  const paginatedResults = results.slice(page * itemsPerPage, (page + 1) * itemsPerPage);
  let output = '| –ù–∞–π–º. –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ | –ö—ñ–ª—å–∫—ñ—Å—Ç—å | –¶—ñ–Ω–∞ |\n|---------------------|-----------|--------|\n';
  for (let i = 0; i < paginatedResults.length && i < itemsPerPage; i++) {
    const row = paginatedResults[i];
    const name = row[getColumnIndex(headers, '–Ω–∞–∑–≤–∞')] || '‚Äî';
    const quantity = row[getColumnIndex(headers, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å')] || '‚Äî';
    const price = row[getColumnIndex(headers, '—Ü—ñ–Ω–∞')] || '‚Äî';
    output += `| ${name.padEnd(19).slice(0, 19)} | ${quantity} | ${price} |\n`;
  }
  return new EmbedBuilder()
    .setTitle(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É (${results.length})`)
    .setDescription(`\`\`\`md\n${output}\`\`\``)
    .setFooter({ text: `–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${page + 1}/${totalPages}` })
    .setColor(3066993);
}

module.exports = {
  getColumnIndex,
  getSheetData,
  cacheSearchResults,
  getCachedResults,
  generatePageEmbed,
  itemsPerPage,
  CACHE_TTL,
  searchCache
};