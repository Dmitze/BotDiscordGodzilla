const {
  Client,
  GatewayIntentBits,
  Routes,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  REST
} = require('discord.js');
const fetch = (...args) => import('node-fetch').then(({ default: f }) => f(...args));
const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const tmpDir = './tmp';
if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);

if (!process.env.SHEET_ID || !process.env.GOOGLE_API_KEY || !process.env.APP_SCRIPT_URL || !process.env.BOT_TOKEN) {
  console.error("‚ùó –û–¥–Ω–∞ –∑ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö ENV-–∑–º—ñ–Ω–Ω–∏—Ö –≤—ñ–¥—Å—É—Ç–Ω—è");
  process.exit(1);
}

const SHEET_ID = process.env.SHEET_ID;
const SHEET_NAME = '–ê—Ä–∫—É—à1';
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
const APP_SCRIPT_URL = process.env.APP_SCRIPT_URL;

const API_URL = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${SHEET_NAME}?key=${GOOGLE_API_KEY}`;
const CELLS_URL = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/C964:E964?key=${GOOGLE_API_KEY}`;

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMessageReactions
  ]
});

const commands = [
  {
    name: '–∑–∞–ª–∏—à–∫–∏',
    description: '–ü–æ–∫–∞–∑—É—î –ø—ñ–¥—Å—É–º–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü—ñ',
  },
  {
    name: '–æ–Ω–æ–≤–∏—Ç–∏',
    description: '–ü–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ',
  },
  {
    name: '–ø–æ—à—É–∫',
    description: '–ü–æ—à—É–∫ –∑–∞ –ø–æ–ª—è–º–∏ —Ç–∞–±–ª–∏—Ü—ñ',
    options: [
      {
        name: '–ø–æ–ª–µ',
        description: '–ó–∞ —è–∫–∏–º –ø–æ–ª–µ–º —à—É–∫–∞—Ç–∏',
        type: 3,
        required: true,
        choices: [
          { name: '–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è', value: '–Ω–∞–∑–≤–∞' },
          { name: '–°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä', value: '—Å–µ—Ä—ñ—è' },
          { name: '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', value: '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç' },
          { name: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', value: '–∫—ñ–ª—å–∫—ñ—Å—Ç—å' },
          { name: '–¶—ñ–Ω–∞', value: '—Ü—ñ–Ω–∞' }
        ]
      },
      {
        name: '–∑–∞–ø–∏—Ç',
        description: '–©–æ —à—É–∫–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "—Å—Ç–æ–ª", "5")',
        type: 3,
        required: true
      }
    ]
  },
  {
    name: '—Ä–æ–∑—É–º–Ω–∏–π-–ø–æ—à—É–∫',
    description: '–ü–æ—à—É–∫ –∑–∞ –∫—ñ–ª—å–∫–æ–º–∞ –ø–æ–ª—è–º–∏',
    options: [
      { name: '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', type: 3, description: '–®—É–∫–∞—Ç–∏ –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–æ–≤–∞—Ä—É' },
      { name: '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', type: 3, description: '–®—É–∫–∞—Ç–∏ –∑–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º' },
      { name: '—Å–µ—Ä—ñ—è', type: 3, description: '–®—É–∫–∞—Ç–∏ –∑–∞ —Å–µ—Ä—ñ–π–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º' },
      { name: '—Ü—ñ–Ω–∞_–≤–∏—â–µ', type: 10, description: '–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –¥–æ—Ä–æ–∂—á–µ —Ü—å–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è' },
      { name: '–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–≤–∏—â–µ', type: 10, description: '–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –±—ñ–ª—å—à–µ' }
    ]
  },
  {
    name: '–ø–æ—à—É–∫-–µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ',
    description: '–ï–∫—Å–ø–æ—Ä—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –≤ Excel (.xlsx)',
    options: [
      {
        name: '–ø–æ–ª–µ',
        description: '–ó–∞ —è–∫–∏–º –ø–æ–ª–µ–º —à—É–∫–∞—Ç–∏',
        type: 3,
        required: true,
        choices: [
          { name: '–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è', value: '–Ω–∞–∑–≤–∞' },
          { name: '–°–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä', value: '—Å–µ—Ä—ñ—è' },
          { name: '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', value: '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç' },
          { name: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', value: '–∫—ñ–ª—å–∫—ñ—Å—Ç—å' },
          { name: '–¶—ñ–Ω–∞', value: '—Ü—ñ–Ω–∞' }
        ]
      },
      {
        name: '–∑–∞–ø–∏—Ç',
        description: '–©–æ —à—É–∫–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "—Å—Ç–æ–ª", "5")',
        type: 3,
        required: true
      }
    ]
  },
  {
    name: '–µ–∫—Å–ø–æ—Ä—Ç',
    description: '–ï–∫—Å–ø–æ—Ä—Ç—É—î –≤—Å—é —Ç–∞–±–ª–∏—Ü—é –≤ Excel (.xlsx)'
  },
  {
    name: 'help',
    description: '–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥'
  }
];

// === –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü—ã ===
function getColumnIndex(headers, field) {
  const headerMap = {
    –Ω–∞–∑–≤–∞: ['–Ω–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏'],
    —Å–µ—Ä—ñ—è: ['—Å–µ—Ä—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä', '—Å–µ—Ä–π—ñ–Ω–∏–π –Ω–æ–º–µ—Ä'],
    –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: ['–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'],
    –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ['–∫—ñ–ª—å–∫—ñ—Å—Ç—å'],
    —Ü—ñ–Ω–∞: ['—Ü—ñ–Ω–∞'],
    –≤–∞—Ä—Ç—ñ—Å—Ç—å: ['–≤–∞—Ä—Ç—ñ—Å—Ç—å']
  };
  for (let i = 0; i < headers.length; i++) {
    const headerName = (headers[i] || '').toLowerCase().replace(/\s+/g, ' ').trim();
    if (headerMap[field]?.some(h => h.toLowerCase() === headerName)) {
      return i;
    }
  }
  return -1;
}

async function getSheetData(range = SHEET_NAME) {
  const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${range}?key=${GOOGLE_API_KEY}`;
  try {
    const res = await fetch(url);
    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
    const data = await res.json();
    return data.values || [];
  } catch (err) {
    console.error('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ:', err.message);
    return [];
  }
}

const searchCache = {};
const CACHE_TTL = 5 * 60 * 1000;
const itemsPerPage = 10;

function cacheSearchResults(userId, results, headers) {
  searchCache[userId] = {
    results,
    headers,
    timestamp: Date.now()
  };
}
function getCachedResults(userId) {
  const cached = searchCache[userId];
  if (!cached || Date.now() - cached.timestamp > CACHE_TTL) {
    return null;
  }
  return cached;
}
function generatePageEmbed(results, page, headers) {
  const totalPages = Math.ceil(results.length / itemsPerPage);
  const paginatedResults = results.slice(page * itemsPerPage, (page + 1) * itemsPerPage);
  let output = '| –ù–∞–π–º. –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ | –ö—ñ–ª—å–∫—ñ—Å—Ç—å | –¶—ñ–Ω–∞ |\n|---------------------|-----------|--------|\n';
  for (let i = 0; i < paginatedResults.length && i < itemsPerPage; i++) {
    const row = paginatedResults[i];
    const name = row[getColumnIndex(headers, '–Ω–∞–∑–≤–∞')] || '‚Äî';
    const quantity = row[getColumnIndex(headers, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å')] || '‚Äî';
    const price = row[getColumnIndex(headers, '—Ü—ñ–Ω–∞')] || '‚Äî';
    output += `| ${name.padEnd(19).slice(0, 19)} | ${quantity} | ${price} |\n`;
  }
  return new EmbedBuilder()
    .setTitle(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É (${results.length})`)
    .setDescription(`\`\`\`md\n${output}\`\`\``)
    .setFooter({ text: `–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${page + 1}/${totalPages}` })
    .setColor(3066993);
}

// ======/–∑–∞–ª–∏—à–∫–∏ (–∏—Ç–æ–≥ C964:E964)=====
client.on('interactionCreate', async interaction => {
  if (!interaction.isChatInputCommand()) return;
  try {
    switch (interaction.commandName) {
      case '–∑–∞–ª–∏—à–∫–∏': {
        const cellRes = await fetch(CELLS_URL);
        if (!cellRes.ok) throw new Error(`HTTP error! status: ${cellRes.status}`);
        const cellData = await cellRes.json();
        const cellValues = cellData.values?.[0] || [];
        const vartist = cellValues[0] || '‚Äî';
        const kilkist = cellValues[1] || '‚Äî';
        const tsina = cellValues[2] || '‚Äî';
        const embed = new EmbedBuilder()
          .setTitle('üìä –ü—ñ–¥—Å—É–º–æ–∫')
          .addFields([
            { name: '–í–∞—Ä—Ç—ñ—Å—Ç—å', value: `${vartist} –≥—Ä–Ω`, inline: true },
            { name: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', value: `${kilkist} —à—Ç.`, inline: true },
            { name: '–¶—ñ–Ω–∞', value: `${tsina} –≥—Ä–Ω`, inline: true }
          ])
          .setColor(5763719)
          .setTimestamp();
        await interaction.reply({ embeds: [embed], flags: 0 });
        break;
      }
      case '–æ–Ω–æ–≤–∏—Ç–∏': {
        const sheetData = await getSheetData();
        const headers = sheetData[0];
        const rows = sheetData.slice(1);
        let output = '| –ù–∞–π–º. –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ | –ö—ñ–ª—å–∫—ñ—Å—Ç—å | –¶—ñ–Ω–∞ |\n|---------------------|-----------|--------|\n';
        const nameIdx = getColumnIndex(headers, '–Ω–∞–∑–≤–∞');
        const qtyIdx = getColumnIndex(headers, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å');
        const priceIdx = getColumnIndex(headers, '—Ü—ñ–Ω–∞');
        for (let i = Math.max(0, rows.length - 10); i < rows.length; i++) {
          const row = rows[i];
          const name = row[nameIdx] || '‚Äî';
          const quantity = row[qtyIdx] || '‚Äî';
          const price = row[priceIdx] || '‚Äî';
          output += `| ${name.padEnd(19).slice(0,19)} | ${quantity} | ${price} |\n`;
        }
        const embedUpdate = new EmbedBuilder()
          .setTitle('üîÑ –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏')
          .setDescription(`\`\`\`md\n${output}\`\`\``)
          .setColor(3066993);
        await interaction.reply({ embeds: [embedUpdate], flags: 0 });
        break;
      }
      case '–ø–æ—à—É–∫': {
        const field = interaction.options.getString('–ø–æ–ª–µ');
        const query = interaction.options.getString('–∑–∞–ø–∏—Ç').toLowerCase();
        const sheetData = await getSheetData();
        const headers = sheetData[0];
        const rows = sheetData.slice(1);
        const colIndex = getColumnIndex(headers, field);
        if (colIndex === -1) {
          await interaction.reply({ content: '‚ùå –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–ª–µ –¥–ª—è –ø–æ—à—É–∫—É.', flags: 0 });
          return;
        }
        const isNumericField = ['–∫—ñ–ª—å–∫—ñ—Å—Ç—å', '—Ü—ñ–Ω–∞'].includes(field);
        const results = rows.filter(row => {
          const value = (row[colIndex] || '').toString().toLowerCase();
          return isNumericField ? Number(value.replace(',', '.')) >= Number(query.replace(',', '.')) : value.includes(query);
        });
        if (results.length === 0) {
          return interaction.reply({ content: 'üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', flags: 0 });
        }
        cacheSearchResults(interaction.user.id, results, headers);
        let currentPage = 0;
        const rowButtons = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId('prev_page')
              .setLabel('‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è')
              .setStyle(ButtonStyle.Secondary)
              .setDisabled(true),
            new ButtonBuilder()
              .setCustomId('next_page')
              .setLabel('‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞')
              .setStyle(ButtonStyle.Secondary)
              .setDisabled(results.length <= itemsPerPage),
            new ButtonBuilder()
              .setCustomId('download_excel_search')
              .setLabel('üìä –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏')
              .setStyle(ButtonStyle.Success)
          );
        await interaction.reply({
          embeds: [generatePageEmbed(results, currentPage, headers)],
          components: [rowButtons],
          flags: 0
        });
        break;
      }
      case '—Ä–æ–∑—É–º–Ω–∏–π-–ø–æ—à—É–∫': {
        const sheetData = await getSheetData();
        const rows = sheetData.slice(1);
        const headers = sheetData[0];
        const filters = {
          name: interaction.options.getString('–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'),
          client: interaction.options.getString('–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'),
          series: interaction.options.getString('—Å–µ—Ä—ñ—è'),
          priceMin: interaction.options.getNumber('—Ü—ñ–Ω–∞_–≤–∏—â–µ'),
          quantityMin: interaction.options.getNumber('–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–≤–∏—â–µ')
        };
        const smartResults = rows.filter(row => {
          const nameMatch = !filters.name || (row[getColumnIndex(headers, '–Ω–∞–∑–≤–∞')] || '').toLowerCase().includes(filters.name.toLowerCase());
          const clientMatch = !filters.client || (row[getColumnIndex(headers, '–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç')] || '').toLowerCase().includes(filters.client.toLowerCase());
          const seriesMatch = !filters.series || (row[getColumnIndex(headers, '—Å–µ—Ä—ñ—è')] || '').toLowerCase().includes(filters.series.toLowerCase());
          const priceMatch = !filters.priceMin || Number((row[getColumnIndex(headers, '—Ü—ñ–Ω–∞')] || '0').replace(',', '.')) >= filters.priceMin;
          const quantityMatch = !filters.quantityMin || Number((row[getColumnIndex(headers, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å')] || '0').replace(',', '.')) >= filters.quantityMin;
          return nameMatch && clientMatch && seriesMatch && priceMatch && quantityMatch;
        });
        if (smartResults.length === 0) {
          return interaction.reply({ content: 'üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', flags: 0 });
        }
        cacheSearchResults(interaction.user.id, smartResults, headers);
        let outputSmartSearch = '| –ù–∞–π–º. –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ | –ö—ñ–ª—å–∫—ñ—Å—Ç—å | –¶—ñ–Ω–∞ |\n|---------------------|-----------|--------|\n';
        for (let i = 0; i < Math.min(10, smartResults.length); i++) {
          const row = smartResults[i];
          const name = row[getColumnIndex(headers, '–Ω–∞–∑–≤–∞')] || '‚Äî';
          const quantity = row[getColumnIndex(headers, '–∫—ñ–ª—å–∫—ñ—Å—Ç—å')] || '‚Äî';
          const price = row[getColumnIndex(headers, '—Ü—ñ–Ω–∞')] || '‚Äî';
          outputSmartSearch += `| ${name.padEnd(19).slice(0,19)} | ${quantity} | ${price} |\n`;
        }
        const embedSmartSearch = new EmbedBuilder()
          .setTitle(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—É–º–Ω–æ–≥–æ –ø–æ—à—É–∫—É (${smartResults.length})`)
          .setDescription(`\`\`\`md\n${outputSmartSearch}\`\`\``)
          .setColor(3066993);
        const rowSmartExport = new ActionRowBuilder()
          .addComponents(
            new ButtonBuilder()
              .setCustomId('download_excel_search')
              .setLabel('–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel')
              .setStyle(ButtonStyle.Success)
          );
        await interaction.reply({
          embeds: [embedSmartSearch],
          components: [rowSmartExport],
          flags: 0
        });
        break;
      }
      case '–ø–æ—à—É–∫-–µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ': {
        const field = interaction.options.getString('–ø–æ–ª–µ');
        const query = interaction.options.getString('–∑–∞–ø–∏—Ç').toLowerCase();
        const sheetData = await getSheetData();
        const rows = sheetData.slice(1);
        const headers = sheetData[0];
        const colIndex = getColumnIndex(headers, field);
        if (colIndex === -1) {
          return interaction.reply({ content: '‚ùå –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–ª–µ –¥–ª—è –ø–æ—à—É–∫—É.', flags: 0 });
        }
        const isNumericField = ['–∫—ñ–ª—å–∫—ñ—Å—Ç—å', '—Ü—ñ–Ω–∞'].includes(field);
        const results = rows.filter(row => {
          const value = (row[colIndex] || '').toString().toLowerCase();
          return isNumericField ? Number(value.replace(',', '.')) >= Number(query.replace(',', '.')) : value.includes(query);
        });
        if (results.length === 0) {
          return interaction.reply({ content: 'üîç –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', flags: 0 });
        }
        const exportData = [headers, ...results];
        const worksheet = XLSX.utils.aoa_to_sheet(exportData);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É');
        const filePath = path.join(tmpDir, `search_results_${interaction.user.id}_${Date.now()}.xlsx`);
        XLSX.writeFile(workbook, filePath);
        await interaction.reply({
          content: 'üìä –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É:',
          files: [filePath],
          flags: 0
        });
        setTimeout(() => {
          fs.unlink(filePath, () => {});
        }, 10000);
        break;
      }
      case '–µ–∫—Å–ø–æ—Ä—Ç': {
        const sheetData = await getSheetData();
        const exportRows = sheetData || [];
        const worksheet = XLSX.utils.aoa_to_sheet(exportRows);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, '–î–∞–Ω—ñ');
        const filePath = path.join(tmpDir, `table_${interaction.user.id}_${Date.now()}.xlsx`);
        XLSX.writeFile(workbook, filePath);
        await interaction.reply({
          content: 'üìé –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—é —Ç–∞–±–ª–∏—Ü—é...',
          files: [filePath],
          flags: 0
        });
        setTimeout(() => {
          fs.unlink(filePath, () => {});
        }, 10000);
        break;
      }
      case 'help': {
        const helpEmbed = new EmbedBuilder()
          .setTitle('üìö –î–æ–ø–æ–º–æ–≥–∞')
          .setDescription('–û—Å—å —É—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:')
          .addFields([
            { name: '/–∑–∞–ª–∏—à–∫–∏', value: '–ü–æ–∫–∞–∑—É—î –ø—ñ–¥—Å—É–º–æ–∫ (–í–∞—Ä—Ç—ñ—Å—Ç—å, –ö—ñ–ª—å–∫—ñ—Å—Ç—å, –¶—ñ–Ω–∞)', inline: false },
            { name: '/–æ–Ω–æ–≤–∏—Ç–∏', value: '–ü–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–ø–∏—Å—ñ–≤', inline: false },
            { name: '/–ø–æ—à—É–∫ [–ø–æ–ª–µ] [–∑–∞–ø–∏—Ç]', value: '–ü–æ—à—É–∫ –∑–∞ –ø–æ–ª—è–º–∏: –Ω–∞–∑–≤–∞, —Å–µ—Ä—ñ—è, –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', inline: false },
            { name: '/—Ä–æ–∑—É–º–Ω–∏–π-–ø–æ—à—É–∫', value: '–ü–æ—à—É–∫ –∑–∞ –∫—ñ–ª—å–∫–æ–º–∞ –ø–æ–ª—è–º–∏', inline: false },
            { name: '/–ø–æ—à—É–∫-–µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ [–ø–æ–ª–µ] [–∑–∞–ø–∏—Ç]', value: '–ï–∫—Å–ø–æ—Ä—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –≤ Excel', inline: false },
            { name: '!–¥–æ–¥–∞—Ç–∏ [–Ω–∞–∑–≤–∞] [–∫—ñ–ª—å–∫—ñ—Å—Ç—å]', value: '–î–æ–¥–∞—î –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å —á–µ—Ä–µ–∑ Google Apps Script', inline: false },
            { name: '!–µ–∫—Å–ø–æ—Ä—Ç', value: '–ï–∫—Å–ø–æ—Ä—Ç—É—î—Ç—å—Å—è –≤—Å—è —Ç–∞–±–ª–∏—Ü—è', inline: false }
          ])
          .setColor(5763719)
          .setTimestamp();
        await interaction.reply({ embeds: [helpEmbed], flags: 0 });
        break;
      }
      default:
        await interaction.reply({ content: '‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞!', flags: 64 });
    }
  } catch (err) {
    console.error("interactionCreate –≥–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", err);
    try {
      if (!interaction.replied && !interaction.deferred) await interaction.reply({ content: '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.', ephemeral: true });
      else await interaction.editReply({ content: '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.' });
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –Ω–∞ –æ—à–∏–±–∫—É:", e);
    }
  }
});

// ====== –≠–∫—Å–ø–æ—Ä—Ç Excel –ø–æ –∫–Ω–æ–ø–∫–µ =====
client.on('interactionCreate', async interaction => {
  if (!interaction.isButton()) return;
  const userId = interaction.user.id;
  const cached = getCachedResults(userId);
  if (!cached) {
    return interaction.reply({ content: '‚ùå –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É.', flags: 64 });
  }
  if (interaction.customId === 'download_excel_search') {
    const exportData = [cached.headers, ...cached.results];
    const workbook = XLSX.utils.book_new();
    const worksheet = XLSX.utils.aoa_to_sheet(exportData);
    XLSX.utils.book_append_sheet(workbook, worksheet, '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É');
    const filePath = path.join(tmpDir, `search_${userId}_${Date.now()}.xlsx`);
    XLSX.writeFile(workbook, filePath);
    await interaction.reply({
      content: 'üìä –û—Å—å –≤–∞—à–∞ —Ç–∞–±–ª–∏—Ü—è:',
      files: [filePath],
      flags: 0
    });
    setTimeout(() => { fs.unlink(filePath, () => {}); }, 10000);
  }
  // –î–æ–±–∞–≤—å —Ç—É—Ç –ª–æ–≥–∏–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º
});

client.once('ready', async () => {
  console.log(`–ë–æ—Ç ${client.user.tag} –æ–Ω–ª–∞–π–Ω!`);
  try {
    await new REST({ version: '10' }).setToken(process.env.BOT_TOKEN)
      .put(Routes.applicationCommands(client.user.id), { body: commands });
    console.log('Slash-–∫–æ–º–∞–Ω–¥–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!');
  } catch (error) {
    console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏:', error);
  }
});

client.login(process.env.BOT_TOKEN).catch(err => {
  console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ login:", err);
});